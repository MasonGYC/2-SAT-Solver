from algo_bonus import SAT2_Solver, check_validation
from algo_final import MAIN

'''
this file is to test whether the original SAT2 solver will generate the same result with Kosaraju's algorithm, and whetehr both of them generate valid (but not necessarily the same) solutions
'''
def construct_bool_dict(input_list):
    '''
    Convert the solution generated by both SAT2_Solver and MAIN to dictionary

    Parameters
    ----------
    input_list : nesteed list
        solution in list format

    Returns
    -------
    result : dictionary
        solution in dic format, key is literal, value is assigned value

    '''
    if input_list is None:
        return None
    result = {}
    for i in range(1, len(input_list)+1):
        result[i] = True if input_list[i-1]==1 else False
        result[-i] = not result[i]
    return result

#test cases
test_cases = [
    [3, 5, [[2, 3], [1, 2], [-1, 2], [2, -1], [-1, -2]]],
    [4, 5, [[1, 2], [-1, -3], [3, 1], [-1, -2], [2, 4]]],
    [2, 4, [[1, 2], [-1, 2], [-2, 1], [-1, -2]]],
    [5, 7, [[1, 2], [-2, 3], [-1, -2], [3, 4], [-3, 5], [-4, -5], [-3, 4]]]
]

#iterate through all test cases and print results
for case in test_cases:
    print("testcase: ",case)
    res_kosa, unsat, sol_kosa = MAIN(case[0],case[1],case[2])
    res_ori, sol_ori = SAT2_Solver(case[2])
     
    if res_kosa == res_ori:
        print("same result: ", res_kosa)
        if res_kosa == 'UNSATISFIABLE':
            print('UNSATISFIABLE')
        else:
            sol_kosa = construct_bool_dict(sol_kosa)
            sol_ori = construct_bool_dict(sol_ori)
            
            valid_kosa = check_validation(case[2], sol_kosa)[0]
            valid_ori = check_validation(case[2], sol_ori)[0]
            
            if valid_kosa == valid_ori == True:
                print("solution valid")
            else:
                print(valid_kosa, valid_ori)
                print("solution invalid")
    else:
        print("different result")
        
